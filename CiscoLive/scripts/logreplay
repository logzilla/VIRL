#!/usr/bin/env perl
# cpanm Log::Syslog::Fast String::Random
use warnings;
use strict;
$| = 1;

use POSIX qw/strftime/;
use vars qw/ %opt /;
use Log::Syslog::Fast ':all';
use String::Random;
use Getopt::Std;
my ($infile, $ts, $host, $facility, $severity, $pri, $prg, $msg, $randhost, $eps, $dest, $hostlimit, $inet, $port, $logger, $eps_rand);
my ($cisco_fac, $cisco_sev, $cisco_mne);
my %known_ip;
use vars qw/ %opt /;

sub init()
{
    use Getopt::Std;
    my $opt_string = 'hr:vt:f:e:d:l:i:p:R';
    getopts( "$opt_string", \%opt ) or usage();
    usage() if $opt{h};
    $inet  = defined( $opt{'i'} ) ? $opt{'i'} : 'UDP';
    $port  = defined( $opt{'p'} ) ? $opt{'p'} : '514';
    $dest  = defined( $opt{'d'} ) ? $opt{'d'} : '127.0.0.1';
    $infile = $opt{'f'} or usage();
    $randhost = $opt{'R'};
    $hostlimit = defined($opt{'l'}) ? $opt{'l'} : '50';
    $eps = defined($opt{'e'}) ? $opt{'e'} : '1';
    $eps_rand = defined($opt{'r'}) ? $opt{'r'} : '.1';
}
#
# Help message
#
sub usage()
{
    print STDERR << "EOF";
This program is used to replay a standard syslog dumpfile into the local syslog receiver (syslog-ng)
    usage: $0 [-hvfs]
    -h        : this (help) message
    -e        : EPS rate
    -d        : Destination host to send udp messages to (default: 127.0.0.1)
    -v        : verbose output
    -f        : Filename to replay (required)
    -i        : INET Protocol (TCP/UDP) default: UDP
    -p        : INET Port default: 514
    -l        : Limit to NN hosts (default: 50)
    -R        : Generate random IP's based on incoming hosts (last octect will be randomized)
    -r        : Sleep randomly between generating events
    example: $0 -f ./syslog.sample
EOF
    exit;
}
init();

my @hosts;
sub array_unique
{
    my @list = @_;
    my %finalList;
    foreach(@list)
    {
        $finalList{$_} = 1; # delete double values
    }
    return (keys(%finalList));
}
# Cisco-type logs
#Jun 19 05:10:58 netcontrol_3750.some.domain 117475: Jun 19 05:10:57: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1024: Neighbor 10.15.213.61 (Vlan40) is down: Interface Goodbye received
# Detect Cisco Mnemonics (capture fac-sev-mne):
my $re_cisco = qr/[%#]([^:%&\^ ]*?)\-(\d+)\-([A-Za-z0-9\-\_]+?)(?:\:|\s)/;

# RFC3164 formatted logs (like /var/log/syslog)
# Jan  4 06:34:31 lz4 syslog-ng[964]: Internal error, duplicate configuration elements refer to the same persistent config; name='afsocket_sd_connections(dgram,AF_UNIX(/dev/log))'
#my $re_rfc3164 = qr/^([A-Za-z]{3}\s+[0-9]{1,2}\s+[0-9]{2}:[0-9]{2}:[0-9]{2})\s+?(\S+)\s+([A-Za-z].*?\s+|[0-9]+.*?\s+)(.*)/;
my $re_rfc3164 = qr/^([A-Za-z]{3}\s+[0-9]{1,2}\s+[0-9]{2}:[0-9]{2}:[0-9]{2})\s+?(\S+)\s+(\S+)(.*)/;

# lz5 format is tab separated
# unixtime.msec<tab>host/ip<tab>pri code<tab>program<tab>message
my $re_lz5 = qr/^(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*)/;

open(FILE, $infile) || die("Can't open $infile : $!\nTry $0 -h\n");
my $count = 0;
print "Running...\n" if not $opt{v};
$eps = 1/$eps;
while(<FILE>) {
    if (&array_unique(@hosts) < $hostlimit) {
        my $line = $_;
        $line =~ s/\%s/\[string\]/g; # used for generic cisco logs containing % chars
        $line =~ s/\%d/\[dec\]/g; # used for generic cisco logs containing % chars
        if ($line =~ m/$re_rfc3164/) {
            print STDOUT "Found RFC3164 type log\n" if $opt{v};
            $ts = $1;
            $host = $2;
            $prg = $3;
            $msg = $4;
        } elsif ($line =~ m/$re_lz5/) {
            print STDOUT "Found LZ TSV type log\n" if $opt{v};
            $ts = $1;
            $host = $2;
            $pri = $3;
            $prg = $4;
            $msg = $5;
        }
        if ($line =~ m/$re_cisco/) {
            print STDOUT "Found Cisco Event\n" if $opt{v};
            $cisco_fac = $1;
            $cisco_sev = $2;
            $cisco_mne = $3;
        }
        $prg =~ s/://g;
        print STDOUT "TS $ts\n" if $opt{v};
        print STDOUT "HOST $host\n" if $opt{v};
        if ($pri) {
            print STDOUT "PRI $pri\n" if $opt{v};
        }
        print STDOUT "PRG $prg\n" if $opt{v};
        print STDOUT "Cisco Fac $cisco_fac\n" if ($opt{v}) && ($cisco_fac);
        print STDOUT "Cisco Sev $cisco_sev\n" if ($opt{v}) && ($cisco_sev);
        print STDOUT "Cisco Mne $cisco_mne\n" if ($opt{v}) && ($cisco_mne);
        print STDOUT "MSG: $msg\n" if $opt{v};
        if ($randhost) {
            if ($host =~ /^([\d]+)\.([\d]+)\.([\d]+)\.([\d]+)$/) {
                $host =~ s/(\d+\.){3}\d+/anonIPv4($&)/ge;
            } else {
                my $string = new String::Random;
                $host = $string->randpattern("...") . ".logzilla.net";  # Prints 3 random printable char
            }
        }
        print STDOUT "HOST $host\n" if $opt{v};
        if ( $inet =~ /UDP/ ) {
            $logger = Log::Syslog::Fast->new( LOG_UDP, "$dest", $port, LOG_LOCAL0, LOG_INFO, "$host", "Replay" );
        } else {
            $logger = Log::Syslog::Fast->new( LOG_TCP, "$dest", $port, LOG_LOCAL0, LOG_INFO, "$host", "Replay" );
        }
        # old logs don't typically containg the PRI
        $facility = 23;
        $severity = 6;
        if ($pri) {
            $facility = int($pri / 8);
            $severity =    ($pri % 8);
        }
        if ($cisco_sev) {
            $severity = $cisco_sev;
            $prg = "Cisco";
        }
        $logger->set_priority($facility, $severity);
        $logger->set_sender($host);
        $logger->set_name($prg);
        $logger->send( "$msg", time );
            select( undef, undef, undef, random_time($eps,$eps_rand));
        push (@hosts, $host);
        $count++;
    } else {
        print "\n\nHost limit of $hostlimit reached, use $0 -l to set a higher limit\n";
        print "Sent $count messages out\n";
        exit;
    }
}
print "Sent $count messages out\n";
close (FILE);
sub anonIPv4 {
    my( $ip ) = @_;
    if( ! exists $known_ip{$ip}) {
        $known_ip{$ip} = sprintf("%d.%d.%d.%d", rand(255), rand(255), rand(255), rand(255));
        printf "Converted %s to %s\n", $ip, $known_ip{$ip} if ($opt{v});
    }
    printf "SEEN: %s is already converted to %s\n", $ip, $known_ip{$ip} if ($opt{v});
    return $known_ip{$ip};
}
sub random_time{
    my ($t, $r) = @_;
    $t=rand($r/$t);
    my $val = int($r/$t);
    # don't ever sleep more than 10 seconds
    $val = 10 if ($val > 10);
    #print "Sleep t = $t\n";
    #print "Sleep r = $r\n";
    #printf "Sleep val = %s\n", $val;
    printf "Sleeping for %f\n", $val if ($opt{v});
    return $val;
}
