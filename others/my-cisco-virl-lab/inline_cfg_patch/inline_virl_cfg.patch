diff -rupN /usr/share/pyshared/vmcloud/action/vmCloud.py vmcloud/action/vmCloud.py
--- /usr/share/pyshared/vmcloud/action/vmCloud.py	2013-12-07 00:00:41.000000000 +0100
+++ vmcloud/action/vmCloud.py	2014-06-26 01:28:31.557537143 +0200
@@ -294,13 +294,14 @@ class vmCloud(object):
                 intfs = vparser.nodes[domain][4]
                 dbootadmcfg = vparser.nodes[domain][5]
                 importfiles = vparser.nodes[domain][6]
+                inlinecfg = vparser.nodes[domain][7]
                 self.log.dbg("Adding domain %s ova %s Dxml %s Bootcfg %s files %s" 
                              % ( domain, ova, dxml, dbootcfg, importfiles))
                 if dtype == 'SIMPLE':
                     if ova and os.path.exists(ova):
                         configs = self.config.copy()
                         configs['configdir'] = confdir
-                        configs['bootstrap'] = [dbootcfg, dbootadmcfg]
+                        configs['bootstrap'] = [dbootcfg, dbootadmcfg,inlinecfg]
                         configs['import_files'] = importfiles
                         dparser.generateDomainXML(domain, configs, ova, dxml)
                         self.log.dbg("%s connections: %s" % (domain,
diff -rupN /usr/share/pyshared/vmcloud/parser/virlParser.py vmcloud/parser/virlParser.py
--- /usr/share/pyshared/vmcloud/parser/virlParser.py	2013-12-06 23:26:27.000000000 +0100
+++ vmcloud/parser/virlParser.py	2014-06-26 01:54:30.229568496 +0200
@@ -93,6 +93,9 @@ class VirlParser(object):
                         errmsg = ('Invalid VIRL file! No vmImage defined ' +
                                   'for node=[%s]' % node_name)
                         raise vmCloudException(VIRLERROR, errmsg)
+                    node_inline_cfg = node.findtext(
+                                ".//ns:entry[@key='router config']",
+                                namespaces={'ns': 'http://www.cisco.com/VIRL'})
                     node_cfg = node.findtext(
                                 ".//ns:entry[@key='bootstrap configuration']",
                                 namespaces={'ns': 'http://www.cisco.com/VIRL'})
@@ -124,6 +127,7 @@ class VirlParser(object):
                 else:
                     node_ova = None
                     node_dxml = None
+                    node_inline_cfg = None
                     node_cfg = None
                     node_adm_cfg = None
                     node_files = None
@@ -149,7 +153,7 @@ class VirlParser(object):
                 self.nodes[self.prefix + node_name] = [node_ova, node_dxml,
                                                        node_type, node_cfg,
                                                        node_ifaces,
-                                                       node_adm_cfg, node_files]
+                                                       node_adm_cfg, node_files,node_inline_cfg]
             dups = [x for x, y in collections.Counter(nnames).items() if y > 1]
             if len(dups) > 0:
                 errmsg = ('Invalid VIRL file! Following nodes are ' +
diff -rupN /usr/share/pyshared/vmcloud/platform/platforms.py vmcloud/platform/platforms.py
--- /usr/share/pyshared/vmcloud/platform/platforms.py	2013-12-06 19:01:33.000000000 +0100
+++ vmcloud/platform/platforms.py	2014-06-26 01:53:45.877567604 +0200
@@ -65,13 +65,18 @@ class VIOSplatform(platformRef):
         datadir = configs['domain_dir']
         ifiles = configs['import_files']
         configFile = configs['bootstrap'][0]
-
-        if not configFile and not ifiles:
+        inlinecfg = configs['bootstrap'][2]
+        if not configFile and not ifiles and not inlinecfg:
             return (retStatus, None)
         if configFile:
             new_config_file = datadir + '/' + self.config_name
             shutil.copyfile(configFile, new_config_file)
             bfiles.append(self.config_name)
+        elif inlinecfg:
+            new_config_file = datadir + '/' + self.config_name
+            with open(new_config_file, "w") as text_file:
+                text_file.write("{}".format(inlinecfg))
+            bfiles.append(self.config_name)      
 
         for ifile in ifiles:
             bname = os.path.basename(ifile)
